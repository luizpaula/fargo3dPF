//<FLAGS>
//#define __GPU
//#define __NOPROTO
//<\FLAGS>

//<INCLUDES>
#include "fargo3d.h"
//<\INCLUDES>

void Accretiongasrunaway_cpu(real dt, int kp){
   
//<USER_DEFINED>
  INPUT(Vx);
  INPUT(Vy);
  INPUT(Density);
  INPUT(Energy);
  OUTPUT(Density);
//<\USER_DEFINED>

//<EXTERNAL>
  real* cs = Energy->field_cpu;
  real* dens = Density->field_cpu;
  real* Vt = Vx->field_cpu;
  real* Vr = Vy->field_cpu;
  real* x  = Sys->x_cpu;
  real* y  = Sys->y_cpu;
  real* z  = Sys->z_cpu;
  real* mt  = Sys->mass_cpu;
  real* vxplanet = Sys->vx;
  real* vyplanet = Sys->vy;
  boolean* Feel  = Sys->FeelDisk;
  int pitch  = Pitch_cpu;
  int stride = Stride_cpu;
  int size_x = Nx+2*NGHX;
  int size_y = Ny+2*NGHY;
  int size_z = Nz+2*NGHZ;
//<\EXTERNAL>

//<INTERNAL>
  real vslocal;
  real RBondi;
  real Raij;
  real Trij;
  real facc;
  real planetdistance;
  real rroche;
  real dist;
  real smoothing;
  real vxcel;
  real vycel;
  real vtcel;
  real vrcel;
  real deltaVrel;
  int i;
  int j;
  int k;
//<\INTERNAL>

//<CONSTANT>
// real xmin(Nx+1);
// real ymin(Ny+2*NGHY+1);
// real zmin(Nz+2*NGHZ+1);
// real Szj(Ny+2*NGHY);
// real Szk(Nz+2*NGHZ);
// real GAMMA(1);
// real OMEGAFRAME(1);
// real ASPECTRATIO(1);
// real ROCHESMOOTHING(1);
// real FLARINGINDEX(1);
// real THICKNESSSMOOTHING(1);
//<\CONSTANT>

//<MAIN_LOOP>

  i = j = k = 0;

#ifdef Z
  for (k=0; k<size_z; k++) {
#endif
#ifdef Y
    for (j=0; j<size_y; j++) {
#endif
#ifdef X
      for (i=0; i<size_x; i++) {
#endif
//<#>
           planetdistance = sqrt(x[kp]*x[kp]+y[kp]*y[kp]+z[kp]*z[kp]);
           rroche = planetdistance*pow((1.0/3.0*mt[kp]/MSTAR),1.0/3.0);

           #ifdef ISOTHERMAL
              vslocal = cs[l];
           #endif
           #ifdef ADIABATIC
              vslocal = sqrt(GAMMA*(GAMMA - 1.0)*cs[l]/dens[l]); 
           #endif
           #ifdef POLYTROPIC
              vslocal = sqrt(cs[l]*GAMMA*pow(dens[l],GAMMA-1.0));
           #endif

	   if (ROCHESMOOTHING != 0)
	       smoothing = rroche*ROCHESMOOTHING;
	   else
	       smoothing = ASPECTRATIO*
	       pow(planetdistance/R0,FLARINGINDEX)*
	       planetdistance*THICKNESSSMOOTHING;

            #ifdef CARTESIAN  
               vxcel = Vt[l];
               vycel = Vr[l];       
            #endif

            #ifdef CYLINDRICAL 
               vtcel = 0.5*(Vt[l] + Vt[lxp])+ ymed(j)*OMEGAFRAME;
               vrcel = 0.5*(Vr[l] + Vr[lyp]);
               vxcel = (vrcel*XC - vtcel*YC)/ymed(j);
               vycel = (vrcel*YC + vtcel*XC)/ymed(j);
            #endif

            #ifdef SPHERICAL
               //working
            #endif

            deltaVrel = sqrt(pow(vxcel - vxplanet[kp],2.0) + pow(vycel - vyplanet[kp],2.0));
            RBondi = 2.0*G*mp[kp]/(pow(vslocal,2.0) + pow(deltaVrel,2.0));

            Raij = MIN(RBondi,rroche);  
	    dist =  ((XC-xplanet[n])*(XC-xplanet[n])+
		    (YC-yplanet[n])*(YC-yplanet[n])+
		    (ZC-zplanet[n])*(ZC-zplanet[n]));
            dist = sqrt(dist);

            if (dist < Raij)
               {
               Trij = 2.0*PI*sqrt(pow(dist+smoothing,3.0)/(G*mp[kp]));
               facc = dt/Trij;
               deltaM = facc*dens[l]*SurfZ(j,k);
               dMPlanet += deltaM;
               if (dens[l] > 1.0e-10)  dens[l] *= (1.0 - facc);
               else dens[l] = dens[l];
               }
//<\#>
#ifdef X
      }
#endif
#ifdef Y
    }
#endif
#ifdef Z
  }
#endif
//<\MAIN_LOOP>
}
