//<FLAGS>
//#define __GPU
//#define __NOPROTO
//<\FLAGS>

//<INCLUDES>
#include "fargo3d.h"
//<\INCLUDES>

void Derivsaccretionsolids_cpu(real dt, int kp) {

//<USER_DEFINED>
  INPUT(Sigmam);
  OUTPUT(Sigmam);
//<\USER_DEFINED>

//<EXTERNAL>
  real* Sigma = Sigmam->field_cpu;
  real* denspl = Sys->densrms_cpu;
  real* xpl = Sys->x_cpu;
  real* ypl = Sys->y_cpu;
  real* zpl = Sys->z_cpu;
  real* mpl = Sys->mass_cpu;
  real* ecc = Sys->erms_cpu;
  real* inc = Sys->irms_cpu;
  real* accsolids = Sys->accsol_cpu;
  real* Rcap = Sys->rcore_cpu;
  int pitch  = Pitch_cpu;
  int stride = Stride_cpu;
  int size_x = Nx+2*NGHX;
  int size_y = Ny+2*NGHY;
  int size_z = Nz+2*NGHZ;
//<\EXTERNAL>

//<INTERNAL>
  real rcell;
  real RH;
  real apl;
  real Porbital;
  real ecc_red;
  real inc_red;
  real Beta;
  real IFBETA;
  real IGBETA;
  real Phigh;
  real Pmed;
  real Plow;
  real Pcoll;
  real dMdA;
  real dx;
  real dy;
  real rpl;
  real temp;
  int jmin;
  int jmax;
  int i;
  int j;
  int k;
//<\INTERNAL>

//<CONSTANT>
// real xmin(Nx+1);
// real ymin(Ny+2*NGHY+1);
// real zmin(Nz+2*NGHZ+1);
// real B(1);
// real RM(1);
// real RHOM(1);
//<\CONSTANT>

//<MAIN_LOOP>

  i = j = k = 0;

  apl = sqrt(xpl[kp]*xpl[kp] + ypl[kp]*ypl[kp] + zpl[kp]*zpl[kp]);
  RH = apl*pow(mpl[kp]/(3.0*MSTAR),(1.0/3.0));

  /*PERIOD ORBITAL*/ 
  Porbital = (2.0*Pi)*pow((apl*apl*apl)/(G*(MSTAR+mpl[kp])),0.5);

  /*ECCENTRICITY AND INCLINATION REDUCED (see Fortier et. al., 2012)*/  
  ecc_red = apl*ecc[kp]/RH;
  inc_red = apl*inc[kp]/RH;

  /*VALOR OF BETA (see Fortier et. al., 2012)*/ 
  Beta = inc_red/ecc_red;

  /*IF e IG (Fortier et. al, 2013 - Eq 26 and Eq 27)*/ 
  IFBETA = (1.0 + 0.95925*Beta + 0.77251*Beta*Beta)/(Beta*(0.13142 + 0.12295*Beta));
  IGBETA = (1.0 + 0.39996*Beta)/(Beta*(0.0369 + 0.04833*Beta + 0.00687*Beta*Beta));

  /*VALOR FOR PROBABILITIES (Fortier et. al, 2013 - Eq 23, 24 and Eq 27)*/ 
  Phigh = (pow((Rcap[kp] + RM),2.0)/(2.0*Pi*RH*RH))*(IFBETA + (6.0*RH*IGBETA)/((Rcap[kp] + RM)*ecc_red*ecc_red));
  Pmed = (pow((Rcap[kp] + RM),2.0)/(4.0*Pi*RH*RH*inc_red))*(17.3 + (232.0*RH)/(Rcap[kp] + RM));
  Plow = 11.3*pow(((Rcap[kp] + RM)/RH),0.5); 

  /*VALOR FOR PCOLL (Fortier et. al, 2013 - Eq 28)*/ 
  Pcoll = pow(Phigh,-2.0) + pow(Plow,-2.0);//PCOLL (Fortier et. al, 2013 - Eq 28)
  Pcoll = pow(Pcoll,-0.5);
  Pcoll = MIN(Pmed,Pcoll);

  if (accsolids[kp] < 0.0) accsolids[kp] = 0.0; 
  else accsolids[kp] = (2.0*Pi*denspl[kp]*RH*RH/Porbital)*Pcoll;
  dMdA = accsolids[kp]*dt/(2.0*Pi*apl*B*RH);

  /***********************FIND THE POSITION OF MAX AND MIN - RADIAL (apl +/- B*RHILL)******************/
  dx = xmed(1) - xmed(0);
  dy = ymed(1) - ymed(0);

  #ifdef CARTESIAN/*i -> x, j -> y, k -> z */
     jmax = (int)(((ypl[kp]+(B/2)*RH)-ymin(0))/dy);
     jmin = (int)(((ypl[kp]-(B/2)*RH)-ymin(0))/dy);
  #endif

  #ifdef CYLINDRICAL/*i -> x (azimuthal angle), j -> y (cylindrical radius), k -> z */
     rpl = sqrt(xpl[kp]*xpl[kp] + ypl[kp]*ypl[kp]); //cylindrical radius 
     jmax = (int)(((rpl+(B/2)*RH)-ymin(0))/dy);
     jmin = (int)(((rpl-(B/2)*RH)-ymin(0))/dy);
  #endif

  #ifdef SPHERICAL/*i -> x (azimuthal angle), j -> y (spherical radius), k -> z (colatitude)*/
     jmax = (int)(((apl+(B/2)*RH)-ymin(0))/dy);
     jmin = (int)(((apl-(B/2)*RH)-ymin(0))/dy);
  #endif 

  //problem with boundary processor, this is a solution
  if (jmin < 0 || jmin > Ny){ 
     jmin = 0;
     size_x = 0;
     size_z = 0;
     }
  if (jmax < 0 || jmax > Ny){
     jmax = 0;
     size_x = 0;
     size_z = 0;
     }
  /**************************************************************************************************/

#ifdef Z
  for (k=0;k<size_z;k++) {
#endif
#ifdef Y
    for (j=jmin;j<=jmax;j++) {
#endif
#ifdef X
      for (i=0;i<size_x;i++) {
#endif
//<#>
          Sigma[l] = Sigma[l] - dMdA;
          if (Sigma[l] < 0.0) Sigma[l] = 0.0;
//<\#>
#ifdef X
      }
#endif
#ifdef Y
    }
#endif
#ifdef Z
  }
#endif
//<\MAIN_LOOP>
}
