//<FLAGS>
//#define __GPU
//#define __NOPROTO
//<\FLAGS>

//<INCLUDES>
#include "fargo3d.h"
//<\INCLUDES>

void Computeaccretionsolidsequilibrium_cpu(real dt, int kp) {

//<USER_DEFINED>
  INPUT(Sigmam);
  INPUT(Density);
  OUTPUT(Sigmam);
//<\USER_DEFINED>

//<EXTERNAL>
  real* sigmam = Sigmam->field_cpu;
  real* dens = Density->field_cpu;
  real* x = Sys->x_cpu;
  real* y = Sys->y_cpu;
  real* z = Sys->z_cpu;
  real* m = Sys->mass_cpu;
  real* mcore = Sys->masscore_cpu;
  real* sigmarms = Sys->sigmarms_cpu;
  real* eccrms = Sys->eccrms_cpu;
  real* incrms = Sys->incrms_cpu;
  real* rcore = Sys->rcore_cpu;
  real* accsolids = Sys->accsolids_cpu;
  real* masscrit = Sys->masscrit_cpu;
  int pitch  = Pitch_cpu;
  int stride = Stride_cpu;
  int size_x = Nx+2*NGHX;
  int size_y = Ny+2*NGHY;
  int size_z = Nz+2*NGHZ; 
//<\EXTERNAL>

//<INTERNAL>
  real delta;
  real rpl;
  real RHpl;
  real dMdA;
  int kpl;
  int i;
  int j;
  int k;
//<\INTERNAL>

//<CONSTANT>
// real xmin(Nx+2*NGHX+1);
// real ymin(Ny+2*NGHY+1);
// real zmin(Nz+2*NGHZ+1);
// real B(1);
//<\CONSTANT>

//<MAIN_LOOP>

  i = j = k = 0;

#ifdef Z
  for (k=0; k<size_z; k++) {
#endif
#ifdef Y
    for (j=0; j<size_y; j++) {
#endif
#ifdef X
      for (i=0; i<size_x; i++) {
#endif
//<#>
           rpl =  sqrt(x[kp]*x[kp] + y[kp]*y[kp] + z[kp]*z[kp]);
           RHpl = rpl*pow(mcore[kp]/(3.0*MSTAR),(1.0/3.0));

#ifdef SPHERICAL
           delta =  ymed(j) - rpl;
#endif
#ifdef CYLINDRICAL
           delta =  ymed(j) - rpl;
#endif
#ifdef CARTESIAN
           delta =  sqrt(XC*XC+YC*YC+ZC*ZC) - rpl;
#endif
           if (delta < 0) delta = (-1.0)*delta;

           if (delta < B*RHpl)
              {
              dMdA = accsolids[kp]*dt/(2.0*PI*rpl*B*RHpl);
              sigmam[l] = sigmam[l] - dMdA;
              if (sigmam[l] < 0.0) sigmam[l] = 0.0;
              }
           }
//<\#>
#ifdef X
      }
#endif
#ifdef Y
    }
#endif
#ifdef Z
  }
#endif
//<\MAIN_LOOP>

//<LAST_BLOCK>
#ifdef __GPU
  int Nbpl = Sys->nb;
  real* x = Sys->x_cpu;
  real* y = Sys->y_cpu;
  real* z = Sys->z_cpu;
  real* m = Sys->mass_cpu;
  real* mcore = Sys->masscore_cpu;
  real* sigmarms = Sys->sigmarms_cpu;
  real* eccrms = Sys->eccrms_cpu;
  real* incrms = Sys->incrms_cpu;
  real* rcore = Sys->rcore_cpu;
  real* accsolids = Sys->accsolids_cpu;
  real* masscrit = Sys->masscrit_cpu;
  int pitch  = Pitch_cpu;
  int stride = Stride_cpu;
  int size_x = Nx+2*NGHX;
  int size_y = Ny+2*NGHY;
#endif

  real densrms;
  real year;
  real distmax;
  real distmin;
  real temp = 0.0;
  int indexmax;
  int indexmin;
  real r;
  real RH;
  real Porbital;
  real ecc_red, inc_red;
  real Beta;
  real IFBETA;
  real IGBETA;
  real Phigh;
  real Pmed;
  real Plow;
  real Pcoll;

  real rhogasrms;
  real dp, mp;

  #ifdef MKS
     year = 31536000.0;
  #endif
  #ifdef CGS
     year = 31536000.0;
  #endif
  #if !(defined(MKS) || defined (CGS))
     year = 31536000.0/(sqrt(R0*R0*R0/G/MSTAR));
  #endif

  r = sqrt(x[kp]*x[kp] + y[kp]*y[kp] + z[kp]*z[kp]);
  RH = r*pow(mcore[kp]/(3.0*MSTAR),(1.0/3.0));

  distmax = r + B*RH;
  distmin = r - B*RH;

  if (distmin < YMIN) //left border is outside
     {
     indexmin = (int)(((r-Ymin(NGHY))/(Ymin(Ny+NGHY+1)-Ymin(NGHY)))*(real)Ny) + NGHY;
     }
  if (distmax > YMAX) //right border is outside
     {
     indexmax = (int)(((YMAX-Ymin(NGHY))/(Ymin(Ny+NGHY+1)-Ymin(NGHY)))*(real)Ny) + NGHY;
     }
  if ((distmin > YMIN) && (distmax < YMAX))
     {
     indexmax = (int)(((distmax-Ymin(NGHY))/(Ymin(Ny+NGHY+1)-Ymin(NGHY)))*(real)Ny) + NGHY;
     indexmin = (int)(((distmin-Ymin(NGHY))/(Ymin(Ny+NGHY+1)-Ymin(NGHY)))*(real)Ny) + NGHY;
     }

   #ifndef __GPU
   //for MPI situation - subgrids
   if (indexmin < 0) indexmin = 0;
   if (indexmax > Ny) indexmax = Ny;
   if (indexmin > Ny) indexmin = Ny;
   if (indexmax < 0) indexmax = 0;
   #endif

   if ((indexmax != indexmin)) 
      {
      sigmarms[kp]  = reduction_full_SUM(Sigmam,indexmin,indexmax,NGHZ,Nz+NGHZ)/((indexmax-indexmin)*Nx+2*NGHX);
      densrms  = reduction_full_SUM(Density,indexmin,indexmax,NGHZ,Nz+NGHZ)/((indexmax-indexmin)*Nx+2*NGHX);
      }
   else 
      {
      sigmarms[kp] = 0.0;
      densrms = 0;
      }

   #ifndef __GPU
   MPI_Allreduce(&sigmarms[kp],&temp,1,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);   
   sigmarms[kp] = temp;

   MPI_Allreduce(&densrms,&temp,1,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);   
   densrms = temp;
   #endif

   /*RADIUS OF CORE*/ 
   rcore[kp] = pow(3.0*mcore[kp]/(4.0*PI*RHOM),1.0/3.0); 

   /*PERIOD ORBITAL*/ 
   Porbital = (2.0*PI)*pow((r*r*r)/(G*(MSTAR+mcore[kp])),0.5);

   /*VOLUMETRIC DENSITY OF GAS IN CELL CONTAINING THE PLANET -- ARMITAGE - PLANET FORMATION - EQ. 2.9*/ 
   #ifdef Z
      rhogasrms = densrms;
   #else 
      rhogasrms = (1.0/sqrt(2.0*PI))*(densrms/(ASPECTRATIO*r));
   #endif  

   /*WE CALCULATE THE MASS OF THE PLANETESIMAl**/ 
   if (r < RICE) dp = RHOICE;  //after line ice
   else dp = RHOROCKY; //before line ice
   mp = dp*(4.0/3.0)*PI*pow(RM,3.0);

   /*WE CALCULATE THE ECCENTRICITY AND INCLINATION OF THE PLANETESIMAl (see Fortier e.t al. 2012 - Eq. 56 and 57*/ 
   eccrms[kp] = 1.7*(pow(mp,1.0/15.0)*pow(m[kp],1.0/3.0)*pow(RHOM,2.0/15.0))*pow(B,-1.0/5.0)*pow(CD,-1.0/5.0)*pow(rhogasrms,-1.0/5.0)*pow(MSTAR,-1.0/3.0)*pow(r,-1.0/5.0);
   incrms[kp] = eccrms[kp]/2.0;

   /*ECCENTRICITY AND INCLINATION REDUCED (see Fortier et. al., 2012)*/  
   ecc_red = r*eccrms[kp]/RH;
   inc_red = r*incrms[kp]/RH;

   /*VALOR OF BETA (see Fortier et. al., 2012)*/ 
   Beta = inc_red/ecc_red;

   /*IF e IG (Fortier et. al, 2013 - Eq 26 and Eq 27)*/ 
   IFBETA = (1.0 + 0.95925*Beta + 0.77251*Beta*Beta)/(Beta*(0.13142 + 0.12295*Beta));
   IGBETA = (1.0 + 0.39996*Beta)/(Beta*(0.0369 + 0.04833*Beta + 0.00687*Beta*Beta));

   /*VALOR FOR PROBABILITIES (Fortier et. al, 2013 - Eq 23, 24 and Eq 27)*/ 
   Phigh = (pow((rcore[kp] + RM),2.0)/(2.0*PI*RH*RH))*(IFBETA + (6.0*RH*IGBETA)/((rcore[kp] + RM)*ecc_red*ecc_red));
   Pmed = (pow((rcore[kp] + RM),2.0)/(4.0*PI*RH*RH*inc_red))*(17.3 + (232.0*RH)/(rcore[kp] + RM));
   Plow = 11.3*pow(((rcore[kp] + RM)/RH),0.5); 

   /*VALOR FOR PCOLL (Fortier et. al, 2013 - Eq 28)*/ 
   Pcoll = pow(Phigh,-2.0) + pow(Plow,-2.0);//PCOLL (Fortier et. al, 2013 - Eq 28)
   Pcoll = pow(Pcoll,-0.5);
   Pcoll = MIN(Pmed,Pcoll);

   if (accsolids[kp] < 0.0) accsolids[kp] = 0.0; 
   else accsolids[kp] = (2.0*PI*sigmarms[kp]*RH*RH/Porbital)*Pcoll;

   mcore[kp] = mcore[kp] + accsolids[kp]*dt;

   if (accsolids[kp] > 0.0)
      { 
      m[kp] = mcore[kp];
      masscrit[kp] = 10.0*pow(accsolids[kp]/((MEARTH/year)*10.0e-6),0.25)*MEARTH;
      }
//<\LAST_BLOCK>
}
