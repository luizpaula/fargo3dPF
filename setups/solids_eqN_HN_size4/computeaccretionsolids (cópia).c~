//<FLAGS>
//#define __GPU
//#define __NOPROTO
//<\FLAGS>

//<INCLUDES>
#include "fargo3d.h"
//<\INCLUDES>

void Computeaccretionsolids_cpu(real dt, int kp) {

//<USER_DEFINED>
  INPUT(Sigmam);
  OUTPUT(Sigmam);
//<\USER_DEFINED>

//<EXTERNAL>
  real* sigmam = Sigmam->field_cpu;
  real* x = Sys->x_cpu;
  real* y = Sys->y_cpu;
  real* z = Sys->z_cpu;
  real* m = Sys->mass_cpu;
  real* mcore = Sys->masscore_cpu;
  real* sigmarms = Sys->sigmarms_cpu;
  real* eccrms = Sys->eccrms_cpu;
  real* incrms = Sys->incrms_cpu;
  real* rcore = Sys->rcore_cpu;
  real* accsolids = Sys->accsolids_cpu;
  real* masscrit = Sys->masscrit_cpu;
  int pitch  = Pitch_cpu;
  int stride = Stride_cpu;
  int size_x = Nx+2*NGHX;
  int size_y = Ny+2*NGHY;
  int size_z = Nz+2*NGHZ; 
//<\EXTERNAL>

//<INTERNAL>
  real r;
  real RH;
  real dMdA;
  real phi;
  real Porbital;
  real ecc_red;
  real inc_red;
  real Beta;
  real IFBETA;
  real IGBETA;
  real Phigh;
  real Pmed;
  real Plow;
  real Pcoll;
  int i;
  int j;
  int k;
//<\INTERNAL>

//<CONSTANT>
// real xmin(Nx+2*NGHX+1);
// real ymin(Ny+2*NGHY+1);
// real zmin(Nz+2*NGHZ+1);
// real B(1);
//<\CONSTANT>

//<MAIN_LOOP>

  i = j = k = 0;

#ifdef Z
  for (k=0; k<size_z; k++) {
#endif
#ifdef Y
    for (j=0; j<size_y; j++) {
#endif
#ifdef X
      for (i=0; i<size_x; i++) {
#endif
//<#>
           r =  sqrt(x[kp]*x[kp] + y[kp]*y[kp] + z[kp]*z[kp]);
           RH = rpl*pow(mcore[kp]/(3.0*MSTAR),(1.0/3.0));

           phi = (ymed(j) - rpl)/(B*RH);
           phi = phi*phi;
           phi = exp(-phi);
           phi *= (1.0/(2.0*pow(PI,3.0/2.0)*B));

           rcore[kp] = pow(3.0*mcore[kp]/(4.0*PI*RHOM),1.0/3.0);
           Porbital = (2.0*PI)*pow((r*r*r)/(G*(MSTAR+mcore[kp])),0.5);

           ecc_red = r*eccrms[kp]/RH;
           inc_red = r*incrms[kp]/RH;
           Beta = inc_red/ecc_red;

           IFBETA = (1.0 + 0.95925*Beta + 0.77251*Beta*Beta)/(Beta*(0.13142 + 0.12295*Beta));
           IGBETA = (1.0 + 0.39996*Beta)/(Beta*(0.0369 + 0.04833*Beta + 0.00687*Beta*Beta));
           
           Phigh = (pow((rcore[kp] + RM),2.0)/(2.0*PI*RH*RH))*(IFBETA + (6.0*RH*IGBETA)/((rcore[kp] + RM)*ecc_red*ecc_red));
           Pmed = (pow((rcore[kp] + RM),2.0)/(4.0*PI*RH*RH*inc_red))*(17.3 + (232.0*RH)/(rcore[kp] + RM));
           Plow = 11.3*pow(((rcore[kp] + RM)/RH),0.5);

           Pcoll = pow(Phigh,-2.0) + pow(Plow,-2.0);//PCOLL (Fortier et. al, 2013 - Eq 28)
           Pcoll = pow(Pcoll,-0.5);
           Pcoll = MIN(Pmed,Pcoll);

           if (accsolids[kp] < 0.0) accsolids[kp] = 0.0; 
           else accsolids[kp] = (2.0*PI*phi)*(2.0*PI*sigmarms[kp]*RH*RH/Porbital)*Pcoll;

           dMdA = (phi)*(2.0*PI*sigmarms[kp]*RH*RH/Porbital)*Pcoll;
           sigmam[l] = sigmam[l] - dMdA;
           if (sigmam[l] < 0.0) sigmam[l] = 0.0;
//<\#>
#ifdef X
      }
#endif
#ifdef Y
    }
#endif
#ifdef Z
  }
#endif
//<\MAIN_LOOP>

//<LAST_BLOCK>

#ifdef __GPU
  real* mcore = Sys->masscore_cpu;
  real* accsolids = Sys->accsolids_cpu;
#endif

  real year;
  real distmax;
  real distmin;
  real temp = 0.0;
  int indexmax;
  int indexmin;
  real r;
  real RH;
  real Porbital;
  real ecc_red, inc_red;
  real Beta;
  real IFBETA;
  real IGBETA;
  real Phigh;
  real Pmed;
  real Plow;
  real Pcoll;

  #ifdef MKS
     year = 31536000.0;
  #endif
  #ifdef CGS
     year = 31536000.0;
  #endif
  #if !(defined(MKS) || defined (CGS))
     year = 31536000.0/(sqrt(R0*R0*R0/G/MSTAR));
  #endif

  mcore[kp] = mcore[kp] + accsolids[kp]*dt;
  if (accsolids[kp] > 0.0)
     { 
     m[kp] = mcore[kp];
     masscrit[kp] = 10.0*pow(accsolids[kp]/((MEARTH/year)*10.0e-6),0.25)*MEARTH;
     }
//<\LAST_BLOCK>
}
