//<FLAGS>
//#define __GPU
//#define __NOPROTO
//<\FLAGS>

//<INCLUDES>
#include "fargo3d.h"
//<\INCLUDES>

void Ecc_inc_evolution_cpu(real dt, int kp) {

//<USER_DEFINED>
  INPUT(Energy);
  INPUT(Ecc);
  OUTPUT(Ecc);
  INPUT(Inc);
  OUTPUT(Inc);
//<\USER_DEFINED>

//<EXTERNAL>
  real* dens = Density->field_cpu;
  real* cs   = Energy->field_cpu;
  real* eccpl = Ecc->field_cpu;
  real* incpl = Inc->field_cpu;
  real* ecc = Sys->erms_cpu;
  real* inc = Sys->irms_cpu;
  real* xpl = Sys->x_cpu;
  real* ypl = Sys->y_cpu;
  real* zpl = Sys->z_cpu;
  real* mpl = Sys->mass_cpu;
  int Nbpl = Sys->nb;
  int pitch  = Pitch_cpu;
  int stride = Stride_cpu;
  int size_x = Nx+2*NGHX;
  int size_y = Ny+2*NGHY;
  int size_z = Nz+2*NGHZ;
//<\EXTERNAL>

//<INTERNAL>
  real RH;
  real apl;
  real ecc0;
  real inc0;
  real vs;
  real Sigmagas;
  real rhogas;
  real rcell;
  real Omegap;
  real vkp;
  real Omega;
  real vk;
  real lambda;
  real numberH2;
  real nu_mol;
  real vrel;
  real Remol;
  real dp;
  real m;

  real ecc1;
  real inc1;

  int i;
  int j;
  int k;
  int ll;
//<\INTERNAL>

//<CONSTANT>
// real xmin(Nx+1);
// real ymin(Ny+2*NGHY+1);
// real zmin(Nz+2*NGHZ+1);
// real RICE(1);
// real RHOM(1);
// real B(1);
// real RM(1);
// real RHOICE(1);
// real RHOROCKY(1);
// real ASPECTRATIO(1);
// real FLARINGINDEX(1);
// real SIGMASLOPE(1);
// real GAMMA(1);
// real CD(1);
//<\CONSTANT>

//<MAIN_LOOP>
  i = j = k = 0;

  apl = sqrt(xpl[kp]*xpl[kp] + ypl[kp]*ypl[kp] + zpl[kp]*zpl[kp]);
  RH = apl*pow(mpl[kp]/(3.0*MSTAR),(1.0/3.0));

#ifdef Z
  for (k=0;k<size_z;k++) {
#endif
#ifdef Y
    for (j=0;j<=size_y;j++) {
#endif
#ifdef X
      for (i=0;i<size_x;i++) {
#endif
//<#>

	  ll = l;
          ecc0 = ecc[ll];
          inc0 = inc[ll];

          /*RADIAL POSITION OF CELL*/
          #ifdef CARTESIAN
             rcell = sqrt(xmed(i)*xmed(i) + ymed(j)*ymed(j) + zmed(k)*zmed(k));
          #endif
          #ifdef CYLINDRICAL
             rcell = ymed(j);
          #endif
          #ifdef SPHERICAL
             rcell = ymed(j);
          #endif

          /*SPEED OF SOUND IN THE CELL*/
          #ifdef ISOTHERMAL
             vs = cs[ll];
          #endif
          #ifdef ADIABATIC /*vslocal^2 =sqrt(GAMMA) * (GAMMA - 1) * e*/
             vs = sqrt(GAMMA * (GAMMA - 1.0) * cs[ll]/dens[ll]); 
          #endif
          #ifdef POLYTROPIC /*vslocal^2 = c * GAMMA * rho^(GAMMA - 1)*/
             vs = sqrt(cs[ll]*GAMMA*pow(dens[ll],GAMMA-1.0));
          #endif

          /*VOLUMETRIC DENSITY OF GAS IN THE CELL, see Armitage - Planet formation - Eq. 2.9*/ 
          #ifdef Z
             rhogas = dens[ll];
             dz = zmed(1) - zmed(0);
             Sigmagas = rhogas*dz;
          #else 
             Sigmagas = dens[ll];
             rhogas = (1.0/sqrt(2.0*Pi))*(dens[ll]/(ASPECTRATIO*rcell));
             //FORTIER PARAMETER
             rhogas = 2.4e-6; //2.4e-9 G/cm3
             Sigmagas = 743.0;  //743 kg/m2 
          #endif

          /*MEAN FREE PATH (see Fortier et. al., 2012 - Eq.33)*/
          /*NA (number Avogrado), MUH2 (molecular mass of H2), CSH2 (cross section of H2) are defined in fondam.h*/
          numberH2 = rhogas*NA/MUH2;
          lambda = 1.0/(numberH2*CSH2);

          /*MOLECULAR VISCOSITY (see Fortier et. al. 2012)*/
          nu_mol = (lambda*vs)/3.0;

          /*ANGULAR VELOCITY AND VELOCITY KEPLERIAN OF THE PLANET - assuming a circular orbit*/
          Omegap = sqrt(G*MSTAR/apl/apl/apl);
          vkp = Omega*apl;

          /*MOLECULAR REYNOLDS NUMBER (see Fortier et. al. 2012 - Eq 30 and text)*/
          vrel = vkp*sqrt((5.0/8.0)*ecc[kp]*ecc[kp] + (1.0/2.0)*inc[kp]*inc[kp]);
          Remol = vrel*RM/nu_mol;

          /*MASS OF THE PLANETESIMALS*/ 
          if (rcell < RICE) dp = RHOICE;  //after line ice
          else dp = RHOROCKY; //before line ice
          m = dp*(4.0/3.0)*Pi*pow(RM,3.0);

          if (1 == 1 )//RM >= lambda)
             {
             if (1 == 1 ) //Remol >= 20.0)
                {
                /*WE CALCULATE nfactor (see Takeuchi 2002 - Eq.17)*/  
                p = -(SIGMASLOPE - FLARINGINDEX);

                //nfactor = (Pi*(1.0 - 2.0*p)/12800.0)*pow(5.2*rcell/R0,0.5);
                nfactor = (Pi*(1.0 - 2.0*p)/12800.0)*pow(5.2*apl/R0,0.5);

                Omega = sqrt(G*MSTAR/rcell/rcell/rcell);
                vk = Omega*rcell;

                /*WE CALCULATE nfactor AND t_drag (see Fortier et. al., 2012 - Eq.37 and 37)*/ 
                t_drag = (8.0*RHOM*RM)/(3.0*CD*rhogas*vk);

                /*METHOD EULER SEMI IMPLICIT QUADRATIC REGIME*/

                /*OBTAIN dedt FOR ecc0 and inc0*/
                /*EFFECT OF NEBULAR GAS DRAG*/
                dedt = -(2.0*ecc0*ecc0/t_drag)*sqrt(9.0*nfactor*nfactor/4.0 + 9.0*epsilon*epsilon*ecc0*ecc0/(4.0*Pi) + inc0*inc0/Pi);


