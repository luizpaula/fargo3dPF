//<FLAGS>
//#define __GPU
//#define __NOPROTO
//<\FLAGS>

//<INCLUDES>
#include "fargo3d.h"
//<\INCLUDES>

void Updateecc_cpu(real dt) {

//<USER_DEFINED>
  INPUT(Dedt);
  INPUT(Ecc);
  OUTPUT(Ecc);
  OUTPUT(Eccquad);
//<\USER_DEFINED>

//<EXTERNAL>
  real* ecc = Ecc->field_cpu;
  real* dedt = Dedt->field_cpu;
  real* eccquad = Eccquad->field_cpu;
  int pitch  = Pitch_cpu;
  int stride = Stride_cpu;
  int size_x = Nx+2*NGHX;
  int size_y = Ny+2*NGHY;
  int size_z = Nz+2*NGHZ;
//<\EXTERNAL>

//<INTERNAL>
  int i;
  int j;
  int k;
//<\INTERNAL>

//<MAIN_LOOP>

  i = j = k = 0;

#ifdef Z
  for (k=0; k<size_z; k++) {
#endif
#ifdef Y
    for (j=0; j<size_y; j++) {
#endif
#ifdef X
      for (i=0; i<size_x; i++) {
#endif
//<#>
      ecc[l] = ecc[l] + dedt[l]*dt;
      eccquad[l] = ecc[l]*ecc[l];
//<\#>
#ifdef X
      }
#endif
#ifdef Y
    }
#endif
#ifdef Z
  }
#endif
//<\MAIN_LOOP>

//<LAST_BLOCK>
  int NbPlanets = Sys->nb;
  int kp;
  real* x = Sys->x_cpu;
  real* y = Sys->y_cpu;
  real* z = Sys->z_cpu;
  real* mass = Sys->mass_cpu;
  real* eccrms = Sys->eccrms_cpu;

  real r;
  real RH;
  real distmax;
  real distmin;
  real temp = 0.0;
  int indexmax;
  int indexmin;

  for (kp = 0; kp < NbPlanets; kp++)
     {
     r = sqrt(x[kp]*x[kp] + y[kp]*y[kp] + z[kp]*z[kp]);
     RH = r*pow(mass[kp]/(3.0*MSTAR),(1.0/3.0));

     dist = r;

     index = (int)(((dist-Ymin(NGHY))/(Ymin(Ny+NGHY+1)-Ymin(NGHY)))*(real)Ny) + NGHY;

     #ifndef __GPU
     //for MPI situation - subgrids
     if (index < 0) index = 0;
     if (index > Ny) index = Ny;
     #endif

     if ((index != 0) && ((index != Ny))) 
        {
        eccrms[kp] = reduction_full_SUM(Eccquad,index,index+1,NGHZ,Nz+NGHZ);
        eccrms[kp] = sqrt(eccrms[kp]/NX);
        }
     else 
        {
        eccrms[kp] = 0.0;
        }

     #ifndef __GPU
     MPI_Allreduce(&eccrms[kp],&temp,1,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);   
     eccrms[kp] = temp;
     #endif
    }
//<\LAST_BLOCK>

}
