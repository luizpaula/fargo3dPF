#include "fargo3d.h"

void InitAccSolidsEquilibrium()
{
  int NbPlanets = Sys->nb;
  int kp;
  real* cs = Energy->field_cpu;
  real* xpl = Sys->x_cpu;
  real* ypl = Sys->y_cpu;
  real* zpl = Sys->z_cpu;
  real* mpl = Sys->mass_cpu;
  real* eccrms = Sys->eccrms_cpu;
  real* incrms = Sys->incrms_cpu;
  real* sigmarms = Sys->sigmarms_cpu;
  real* masscore = Sys->masscore_cpu;
  real* rcore = Sys->rcore_cpu;
  real* accsolids = Sys->accsolids_cpu;
  real* massenv = Sys->massenv_cpu;
  real* masscrit = Sys->masscrit_cpu;
  int pitch  = Pitch_cpu;
  int stride = Stride_cpu;
  int size_x = Nx+2*NGHX;
  int size_y = Ny+2*NGHY;
  
  real dp;
  real m;
  real densrms;
  real rhogasrms; 

  real year;
  real r;
  real RH;
  real rpl;
  real dy;
  real Porbital;
  real ecc_red, inc_red;
  real Beta;
  real IFBETA;
  real IGBETA;
  real Phigh;
  real Pmed;
  real Plow;
  real Pcoll;
  real temp = 0.0;
  int index;

  #ifdef MKS
     year = 31536000.0;
  #endif
  #ifdef CGS
     year = 31536000.0;
  #endif
  #if !(defined(MKS) || defined (CGS))
     year = 31536000.0/(sqrt(R0*R0*R0/G/MSTAR));
  #endif

  for (kp = 0; kp < NbPlanets; kp++)
  {
     r = sqrt(xpl[kp]*xpl[kp] + ypl[kp]*ypl[kp] + zpl[kp]*zpl[kp]);
     RH = r*pow(mpl[kp]/(3.0*MSTAR),(1.0/3.0));

     #ifdef Y
        dy = Ymin(1) - Ymin(0);
        #ifdef CARTESIAN/*y -> y*/
           index = (int)((ypl[kp]-Ymin(0))/dy);
        #endif
        #ifdef CYLINDRICAL/*y -> r*/
           rpl = sqrt(xpl[kp]*xpl[kp] + ypl[kp]*ypl[kp]);
           index = (int)((rpl-Ymin(0))/dy);
        #endif
        #ifdef SPHERICAL/*y -> r*/
           index = (int)((r-Ymin(0))/dy);
        #endif
      #endif

     #ifndef __GPU
     //for MPI situation - subgrids
     if (index < 0) index = 0;
     if (index > Ny) index = Ny;
     #endif

     if ((index != 0) && ((index != Ny))) 
        {
        sigmarms[kp]  = reduction_full_SUM(Sigmam,index,index+1,0,1)/NX;
        densrms  = reduction_full_SUM(Density,index,index+1,0,1)/NX;
        }
     else 
        {
        sigmarms[kp] = 0.0;
        densrms = 0;
        }

     #ifndef __GPU
     MPI_Allreduce(&sigmarms[kp],&temp,1,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);   
     sigmarms[kp] = temp;

     MPI_Allreduce(&densrms,&temp,1,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);   
     densrms = temp;
     #endif

     /*VOLUMETRIC DENSITY OF GAS IN CELL CONTAINING THE PLANET -- ARMITAGE - PLANET FORMATION - EQ. 2.9*/ 
     #ifdef Z
        rhogasrms = densrms;
     #else 
        rhogasrms = (1.0/sqrt(2.0*PI))*(densrms/(ASPECTRATIO*r));
     #endif  

     /*WE CALCULATE THE MASS OF THE PLANETESIMAl**/ 
     if (r < RICE) dp = RHOICE;  //after line ice
     else dp = RHOROCKY; //before line ice
     m = dp*(4.0/3.0)*PI*pow(RM,3.0);

     /*WE CALCULATE THE ECCENTRICITY AND INCLINATION OF THE PLANETESIMAl (see Fortier e.t al. 2012 - Eq. 56 and 57*/ 
     eccrms[kp] = 1.7*(pow(m,1.0/15.0)*pow(mpl[kp],1.0/3.0)*pow(RHOM,2.0/15.0))*pow(B,-1.0/5.0)*pow(CD,-1.0/5.0)*pow(rhogasrms,-1.0/5.0)*pow(MSTAR,-1.0/3.0)*pow(r,-1.0/5.0);
     incrms[kp] = eccrms[kp]/2.0;

     if (mpl[kp] > 10.0*MEARTH)
        {
        rcore[kp] = pow(3.0*masscore[kp]/(4.0*PI*RHOM),1.0/3.0);
        masscore[kp] = 10.0*MEARTH;
        masscrit[kp] = 10.0*MEARTH;
        massenv[kp] = mpl[kp] - masscore[kp];
        accsolids[kp] = 0.0;
        }
     else
        {
        masscore[kp] = mpl[kp];
        massenv[kp] = 0.0; 
        rcore[kp] = pow(3.0*masscore[kp]/(4.0*PI*RHOM),1.0/3.0);

        /*PERIOD ORBITAL*/ 
        Porbital = (2.0*PI)*pow((r*r*r)/(G*(MSTAR+mpl[kp])),0.5);

        /*ECCENTRICITY AND INCLINATION REDUCED (see Fortier et. al., 2012)*/  
        ecc_red = r*eccrms[kp]/RH;
        inc_red = r*incrms[kp]/RH;

        /*VALOR OF BETA (see Fortier et. al., 2012)*/ 
        Beta = inc_red/ecc_red;

        /*IF e IG (Fortier et. al, 2013 - Eq 26 and Eq 27)*/ 
        IFBETA = (1.0 + 0.95925*Beta + 0.77251*Beta*Beta)/(Beta*(0.13142 + 0.12295*Beta));
        IGBETA = (1.0 + 0.39996*Beta)/(Beta*(0.0369 + 0.04833*Beta + 0.00687*Beta*Beta));

        /*VALOR FOR PROBABILITIES (Fortier et. al, 2013 - Eq 23, 24 and Eq 27)*/ 
        Phigh = (pow((rcore[kp] + RM),2.0)/(2.0*PI*RH*RH))*(IFBETA + (6.0*RH*IGBETA)/((rcore[kp] + RM)*ecc_red*ecc_red));
        Pmed = (pow((rcore[kp] + RM),2.0)/(4.0*PI*RH*RH*inc_red))*(17.3 + (232.0*RH)/(rcore[kp] + RM));
        Plow = 11.3*pow(((rcore[kp] + RM)/RH),0.5);

        /*VALOR FOR PCOLL (Fortier et. al, 2013 - Eq 28)*/ 
        Pcoll = pow(Phigh,-2.0) + pow(Plow,-2.0);//PCOLL (Fortier et. al, 2013 - Eq 28)
        Pcoll = pow(Pcoll,-0.5);
        Pcoll = MIN(Pmed,Pcoll);

        accsolids[kp] = (2.0*PI*sigmarms[kp]*RH*RH/Porbital)*Pcoll;
        if (accsolids[kp] < 0.0) accsolids[kp] = 0.0; //for safe
        masscrit[kp] = 10.0*pow(accsolids[kp]/((MEARTH/year)*10.0e-6),0.25)*MEARTH;
        }
  }
}
